{"version":3,"sources":["Flashcard.js","FlashcardList.js","App.js","index.js"],"names":["Flashcard","flashcard","useState","flip","setFlip","className","onClick","currentFlip","question","options","map","option","key","answer","FlashcardList","flashcards","id","decodeString","str","textArea","document","createElement","innerHTML","value","App","setFlashcards","categories","setCategories","categoryEl","useRef","amountEl","useEffect","fetch","then","res","json","data","trivia_categories","onSubmit","e","preventDefault","url","current","shuffle","a","i","length","j","Math","floor","random","results","item","index","incorrect_answers","correct_answer","Date","now","htmlFor","ref","category","name","type","min","step","defaultValue","ReactDOM","render","StrictMode","getElementById"],"mappings":"2RAGe,SAASA,EAAT,GAAmC,IAAdC,EAAa,EAAbA,UAAa,EACvBC,oBAAS,GADc,mBACxCC,EADwC,KAClCC,EADkC,KAE/C,OACE,yBACEC,UAAS,eAAUF,EAAO,OAAS,IACnCG,QAAS,kBAAMF,GAAQ,SAACG,GAAD,OAAkBA,OAEzC,yBAAKF,UAAU,SACZJ,EAAUO,SACX,yBAAKH,UAAU,qBACZJ,EAAUQ,QAAQC,KAAI,SAACC,GACtB,OACE,yBAAKN,UAAU,mBAAmBO,IAAKD,GACpCA,QAMX,yBAAKN,UAAU,QAAQJ,EAAUY,S,MClBxB,SAASC,EAAT,GAAwC,IAAfC,EAAc,EAAdA,WACtC,OACE,yBAAKV,UAAU,aACZU,EAAWL,KAAI,SAACT,GACf,OAAO,kBAAC,EAAD,CAAWA,UAAWA,EAAWW,IAAKX,EAAUe,SC8E/D,IAAMC,EAAe,SAACC,GACpB,IAAMC,EAAWC,SAASC,cAAc,YAExC,OADAF,EAASG,UAAYJ,EACdC,EAASI,OAGHC,EAxFf,WAAgB,IAAD,EACuBtB,mBAAS,IADhC,mBACNa,EADM,KACMU,EADN,OAEuBvB,mBAAS,IAFhC,mBAENwB,EAFM,KAEMC,EAFN,KAIPC,EAAaC,mBACbC,EAAWD,mBAwCjB,OAtCAE,qBAAU,WACRC,MAAM,wCACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLT,EAAcS,EAAKC,wBAEtB,IAiCD,oCACE,0BAAMhC,UAAU,SAASiC,SAhCR,SAACC,GACpBA,EAAEC,iBACF,IAAMC,EAAG,6CAAyCX,EAASY,QAAQnB,MAA1D,qBAA4EK,EAAWc,QAAQnB,OACxGS,MAAMS,GACHR,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACL,IAAMO,EAAU,SAACC,GACf,IAAK,IAAIC,EAAID,EAAEE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACrC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADL,EAEtB,CAACD,EAAEG,GAAIH,EAAEC,IAAvBD,EAAEC,GAFkC,KAE9BD,EAAEG,GAF4B,KAIvC,OAAOH,GAETnB,EACEW,EAAKe,QAAQzC,KAAI,SAAC0C,EAAMC,GACtB,IAAM5C,EAAO,sBACR2C,EAAKE,kBAAkB5C,KAAI,SAACG,GAAD,OAAYI,EAAaJ,OAD5C,CAEXI,EAAamC,EAAKG,kBAEpB,MAAO,CACLvC,GAAG,GAAD,OAAKqC,EAAL,YAAcG,KAAKC,OACrBjD,SAAUS,EAAamC,EAAK5C,UAC5BK,OAAQI,EAAamC,EAAKG,gBAC1B9C,QAASkC,EAAQlC,aAUvB,yBAAKJ,UAAU,cACb,2BAAOqD,QAAQ,YAAf,YACA,4BAAQ1C,GAAG,WAAW2C,IAAK/B,GACxBF,EAAWhB,KAAI,SAACkD,GACf,OACE,4BAAQrC,MAAOqC,EAAS5C,GAAIJ,IAAKgD,EAAS5C,IACvC4C,EAASC,WAMpB,yBAAKxD,UAAU,cACb,2BAAOqD,QAAQ,UAAf,uBACA,2BACEI,KAAK,SACL9C,GAAG,SACH+C,IAAI,IACJC,KAAK,IACLC,aAAc,GACdN,IAAK7B,KAGT,yBAAKzB,UAAU,cACb,4BAAQA,UAAU,OAAlB,cAGJ,yBAAKA,UAAU,aACb,kBAAC,EAAD,CAAeU,WAAYA,OC5EnCmD,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFhD,SAASiD,eAAe,W","file":"static/js/main.52d417fc.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './Flashcard.css';\r\n\r\nexport default function Flashcard({ flashcard }) {\r\n  const [flip, setFlip] = useState(false); //false: front, true:back\r\n  return (\r\n    <div\r\n      className={`card ${flip ? 'flip' : ''}`}\r\n      onClick={() => setFlip((currentFlip) => !currentFlip)}\r\n    >\r\n      <div className='front'>\r\n        {flashcard.question}\r\n        <div className='flashcard-options'>\r\n          {flashcard.options.map((option) => {\r\n            return (\r\n              <div className='flashcard-option' key={option}>\r\n                {option}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n      <div className='back'>{flashcard.answer}</div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport Flashcard from './Flashcard';\r\nimport './FlashcardList.css';\r\n\r\nexport default function FlashcardList({ flashcards }) {\r\n  return (\r\n    <div className='card-grid'>\r\n      {flashcards.map((flashcard) => {\r\n        return <Flashcard flashcard={flashcard} key={flashcard.id} />;\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport FlashcardList from './FlashcardList';\n\nfunction App() {\n  const [flashcards, setFlashcards] = useState([]);\n  const [categories, setCategories] = useState([]);\n\n  const categoryEl = useRef();\n  const amountEl = useRef();\n\n  useEffect(() => {\n    fetch('https://opentdb.com/api_category.php')\n      .then((res) => res.json())\n      .then((data) => {\n        setCategories(data.trivia_categories);\n      });\n  }, []);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const url = `https://opentdb.com/api.php?amount=${amountEl.current.value}&category=${categoryEl.current.value}`;\n    fetch(url)\n      .then((res) => res.json())\n      .then((data) => {\n        const shuffle = (a) => {\n          for (let i = a.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [a[i], a[j]] = [a[j], a[i]];\n          }\n          return a;\n        };\n        setFlashcards(\n          data.results.map((item, index) => {\n            const options = [\n              ...item.incorrect_answers.map((answer) => decodeString(answer)),\n              decodeString(item.correct_answer),\n            ];\n            return {\n              id: `${index}-${Date.now()}`,\n              question: decodeString(item.question),\n              answer: decodeString(item.correct_answer),\n              options: shuffle(options),\n            };\n          })\n        );\n      });\n  };\n\n  return (\n    <>\n      <form className='header' onSubmit={handleSubmit}>\n        <div className='form-group'>\n          <label htmlFor='category'>Category</label>\n          <select id='category' ref={categoryEl}>\n            {categories.map((category) => {\n              return (\n                <option value={category.id} key={category.id}>\n                  {category.name}\n                </option>\n              );\n            })}\n          </select>\n        </div>\n        <div className='form-group'>\n          <label htmlFor='amount'>Number of Questions</label>\n          <input\n            type='number'\n            id='amount'\n            min='1'\n            step='1'\n            defaultValue={10}\n            ref={amountEl}\n          ></input>\n        </div>\n        <div className='form-group'>\n          <button className='btn'>Generate</button>\n        </div>\n      </form>\n      <div className='container'>\n        <FlashcardList flashcards={flashcards} />\n      </div>\n    </>\n  );\n}\n\nconst decodeString = (str) => {\n  const textArea = document.createElement('textarea');\n  textArea.innerHTML = str;\n  return textArea.value;\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}